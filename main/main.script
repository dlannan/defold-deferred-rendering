
function init(self)
	msg.post("@render:", "use_camera_projection")
	msg.post("sceneCam", "acquire_camera_focus")
	
	-- rotate the cube
	go.animate("/main", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 6)
	go.animate("/main", "euler.x", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 9)
	go.animate("/main", "euler.y", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 12)

	-- tint the cube and the sphere
	--model.set_constant("/main#cube", "tint", vmath.vector4(1,1,0,1))
	--model.set_constant("/main#sphere", "tint", vmath.vector4(1,0,0,1))
	
	-- position directional light
	self.light = vmath.vector4(0, 0, go.get_position().z + 1, 0)

	local offscreenCam 	= vmath.matrix4_translation(vmath.vector3(20, 0, -5))
	local offscreenView = { matrix = offscreenCam, vp = vmath.vector4(0, 0, 1920.0, 1080.0) }

	-- Notes:
	-- 	Adding a pass applies a material to a predicate and stores it in a render texture.
	--  The render texture needs to be created before use as well. 
	--  Many passes can be added together, input textures can be provided by the material
	--

	-- Add predicates we want to use in materials to define render sections
	msg.post("@render:", "add_predicate", { name="quad" } )
	msg.post("@render:", "add_predicate", { name="albedo" } )
	
	msg.post("@render:", "new_render_target", { name="middle" } )
	msg.post("@render:", "new_render_target", { name="left" } )
	msg.post("@render:", "new_render_target", { name="pass1" } )
	msg.post("@render:", "new_render_target", { name="pass2" } )
	
	-- Order matters. This is kept for order of render
	local rt_view 	= vmath.matrix4_translation(vmath.vector3(0, 0, -10))
	local renderCam 	= vmath.matrix4_translation(vmath.vector3(-20, 0, -10))
	local outputCam 	= vmath.matrix4_translation(vmath.vector3(20, 0, -10))
		
	msg.post("@render:", "add_pass", 
		{ name="middle", preds={"model",}, material="albedo", output="middle", view=rt_view })

	msg.post("@render:", "add_pass", 
		{ name="left", preds={"model",}, material="albedo", output="left", view=outputCam })
	
-- 	msg.post("@render:", "add_pass", 
-- 		{ name="gui", preds={"model",}, material="albedo", output="gui", view=renderCam })
-- 		
-- 	msg.post("@render:", "add_pass", 
-- 		{ name="rect", preds={"quad",}, material="fullscreen-blend", tex0="base", tex1="gui", view=outputCam, output=nil })

	-- Notes: 
	-- 	To combine passes, use the add_pass with input textures as render texture. 
	--  If no output texture is set, then it will output to the screen
	msg.post("@render:", "add_pass", 	
		{ name="middle-top", preds={"albedo",}, material="albedo_top", tex0="left", view=renderCam, output="pass1" })
	
	msg.post("@render:", "add_pass", 	
		{ name="rect", preds={"quad",}, material="albedo", tex0="middle", view=renderCam, output="pass2" })
	
	msg.post("@render:", "add_pass", 	
		{ name="final", preds={"quad",}, material="fullscreen-blend", tex0="pass1", tex1="pass2", view=renderCam, output=nil })

	local renderView 	= { matrix = renderCam, vp = vmath.vector4(0, 0, 960.0, 640.0) }

	msg.post("@render:", "set_render_view", { index=1, view=renderView } )
end

function on_input(self, action_id, action)
	-- move directional light based on input
	self.light.x = 2 * ((action.x - 480) / 480)
	self.light.y = 2 * ((action.y - 320) / 320)
-- 	model.set_constant("#cube", "light", self.light)
-- 	model.set_constant("#quad", "light", self.light)
-- 	model.set_constant("#sphere", "light", self.light)
end

function update(self)
	-- msg.post("@render:", "use_camera_projection")
	-- msg.post("sceneCam", "acquire_camera_focus")
end