
function init(self)
	msg.post("@render:", "use_camera_projection")
	msg.post("sceneCam", "acquire_camera_focus")
	
	-- rotate the cube
	go.animate("/main", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 6)
	go.animate("/main", "euler.x", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 9)
	go.animate("/main", "euler.y", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_INOUTQUAD, 12)

	-- tint the cube and the sphere
	--model.set_constant("/main#cube", "tint", vmath.vector4(1,1,0,1))
	--model.set_constant("/main#sphere", "tint", vmath.vector4(1,0,0,1))
	
	-- position directional light
	self.light = vmath.vector4(0, 0, go.get_position().z + 1, 0)

	local offscreenCam 	= vmath.matrix4_translation(vmath.vector3(20, 0, -5))
	local offscreenView = { matrix = offscreenCam, vp = vmath.vector4(0, 0, 1920.0, 1080.0) }

	msg.post("@render:", "add_pass", 	{ index=0, name="albedo" })
	msg.post("@render:", "add_pass", 	{ index=1, name="specular" })
	msg.post("@render:", "add_combine", { index=0, name="fullscreen", tex0=0, tex1=1, view=offscreenView })
	--msg.post("@render:", "add_combine", { index=1, name="fullscreen-blend", tex1=-1, tex2=1, view=offscreenView })

	local renderCam 	= vmath.matrix4_translation(vmath.vector3(20, 0, -10))
	local renderView 	= { matrix = renderCam, vp = vmath.vector4(0, 0, 960.0, 640.0) }
	msg.post("@render:", "set_render_view", { index=0, view=renderView } )
end

function on_input(self, action_id, action)
	-- move directional light based on input
	self.light.x = 2 * ((action.x - 480) / 480)
	self.light.y = 2 * ((action.y - 320) / 320)
-- 	model.set_constant("#cube", "light", self.light)
-- 	model.set_constant("#quad", "light", self.light)
-- 	model.set_constant("#sphere", "light", self.light)
end

function update(self)
	-- msg.post("@render:", "use_camera_projection")
	-- msg.post("sceneCam", "acquire_camera_focus")
end